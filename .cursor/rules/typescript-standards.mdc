---
description:
globs:
alwaysApply: false
---
# TypeScript Coding Standards

## Type Definitions
- Always use explicit return types for functions
- Prefer interfaces over types for object shapes
- Use `readonly` for immutable arrays and objects

## Naming Conventions
- Use PascalCase for types, interfaces, and classes
- Use camelCase for variables and functions
- Use UPPER_SNAKE_CASE for constants

## Best Practices
- Enable strict mode in tsconfig.json
- Avoid `any` type - use `unknown` instead
- Use optional chaining (`?.`) and nullish coalescing (`??`)

## Example
```typescript
interface UserData {
  readonly id: string;
  name: string;
  email?: string;
}

const fetchUser = async (id: string): Promise<UserData | null> => {
  // Implementation
};
```
