generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String             @id @default(uuid())
  email                  String             @unique
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  hasCompletedOnboarding Boolean            @default(false)
  brand_identities       BrandIdentity[]
  contentRequests        ContentRequest[]
  ideabankEntries        IdeabankEntry[]
  socialConnections      SocialConnection[]
  superAdmin             SuperAdmin?
  teamMemberships        TeamMember[]
  brandMemberships       BrandMembership[]

  @@map("users")
}

model BrandIdentity {
  id               String   @id @default(uuid())
  userId           String
  brandId          String
  brandName        String?
  industry         String?
  voiceDescriptors String[]
  targetAudience   String?
  brandManifesto   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId           String
  Team             Team     @relation(fields: [teamId], references: [id])
  Brand            Brand    @relation(fields: [brandId], references: [id])

  @@unique([userId, brandId])
  @@map("brand_identities")
}

model IdeabankEntry {
  id        String   @id @default(uuid())
  userId    String
  type      IdeaType
  content   String
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId    String
  Team      Team     @relation(fields: [teamId], references: [id])
  brandId   String?
  Brand     Brand?   @relation(fields: [brandId], references: [id])

  @@map("ideabank_entries")
}

model ContentRequest {
  id               String             @id @default(uuid())
  userId           String
  type             ContentType
  prompt           String
  status           RequestStatus      @default(PENDING)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  feedback         ContentFeedback[]
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  generatedContent GeneratedContent[]
  teamId           String
  Team             Team     @relation(fields: [teamId], references: [id])
  brandId          String?
  Brand            Brand?   @relation(fields: [brandId], references: [id])

  @@map("content_requests")
}

model GeneratedContent {
  id             String            @id @default(uuid())
  requestId      String
  version        Int               @default(1)
  contentType    ContentType
  textContent    String?
  imageUrl       String?
  scriptContent  String?
  metadata       Json?
  isApproved     Boolean           @default(false)
  createdAt      DateTime          @default(now())
  feedback       ContentFeedback[]
  contentRequest ContentRequest    @relation(fields: [requestId], references: [id], onDelete: Cascade)
  scheduledPosts ScheduledPost[]
  teamId         String
  Team           Team     @relation(fields: [teamId], references: [id])
  brandId        String?
  Brand          Brand?   @relation(fields: [brandId], references: [id])

  @@map("generated_content")
}

model ContentFeedback {
  id               String           @id @default(uuid())
  requestId        String
  contentId        String
  rating           Int?
  comment          String?
  createdAt        DateTime         @default(now())
  generatedContent GeneratedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentRequest   ContentRequest   @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@map("content_feedback")
}

model SocialConnection {
  id             String          @id @default(uuid())
  userId         String
  platform       SocialPlatform
  platformUserId String
  accessToken    String
  refreshToken   String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  scheduledPosts ScheduledPost[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId         String
  Team           Team     @relation(fields: [teamId], references: [id])
  brandId        String?
  Brand          Brand?   @relation(fields: [brandId], references: [id])

  @@unique([userId, platform])
  @@map("social_connections")
}

model ScheduledPost {
  id               String           @id @default(uuid())
  contentId        String
  connectionId     String
  scheduledFor     DateTime
  status           PostStatus       @default(SCHEDULED)
  platformPostId   String?
  error            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  socialConnection SocialConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  generatedContent GeneratedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("scheduled_posts")
}

model Team {
  id           String       @id @default(uuid())
  name         String       @unique
  licenseCount Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  members      TeamMember[]
  brandIdentities BrandIdentity[]
  ideabankEntries IdeabankEntry[]
  contentRequests ContentRequest[]
  generatedContents GeneratedContent[]
  socialConnections SocialConnection[]
  brands         Brand[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(uuid())
  userId   String
  teamId   String
  role     TeamRole
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model SuperAdmin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("super_admins")
}

model Brand {
  id          String        @id @default(uuid())
  name        String
  teamId      String
  team        Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  identities  BrandIdentity[]
  socialConnections SocialConnection[]
  contentRequests ContentRequest[]
  generatedContents GeneratedContent[]
  ideabankEntries IdeabankEntry[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  memberships BrandMembership[]

  @@unique([teamId, name])
  @@map("brands")
}

model BrandMembership {
  id       String   @id @default(uuid())
  userId   String
  brandId  String
  role     TeamRole // Reuse TeamRole enum for now
  joinedAt DateTime @default(now())
  brand    Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, brandId])
  @@map("brand_memberships")
}

enum IdeaType {
  TEXT
  LINK
}

enum ContentType {
  TEXT_POST
  IMAGE_POST
  VIDEO_SCRIPT
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  READY_FOR_REVIEW
  APPROVED
  FAILED
}

enum SocialPlatform {
  INSTAGRAM
  TIKTOK
  YOUTUBE
  LINKEDIN
  FACEBOOK
  PINTEREST
}

enum PostStatus {
  SCHEDULED
  POSTING
  POSTED
  FAILED
}

enum TeamRole {
  MEMBER
  ADMIN
}
